#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
par('pch')
par('lty')
par('ylab')
par('las')
par('bg')
par()
x = 2:4
plot(x, pch = 'c')
plot(x, pch = '>')
plot(x, pch = 'c')
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')             # adiciona um titulo ao label do eixo y
plot(lynx)
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
par(mfrow = c(2,2), col.axis = 'red')
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
par()
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
par(mfrow = c(2,2), col.axis = 'red')
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
par(mfrow = c(2,2), col.axis = 'red')
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
plot(x, pch = 'c') # alterando o valor do simbolo no grafico
y = 1:8
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
par(mfrow = c(2,2), col.axis = 'red')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 25, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 10, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 4, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 30, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 30')
y = 1:30
plot(y, las = 30, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 30')
plot(y, las = 20, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 20')
y = 1:8
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
par(mfrow = c(2,2), col.axis = 'red') # para retirar essa cong basta clicar na vassoura na area de plotagem abaixo
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 18')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
plot(y, las = 0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2'))
par(mfrow = c(1,1)) # voltando a exibir apenas 1 grafico
plot(y, las = 1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 1')
plot(y, las = 2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 2')
plot(y, las = 3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 3')
legend('topright', pch = 1, col = c('blue', 'red'), legend = c('Var1', 'Var2')) # só entra no ultimo grafico
# visualizando cores disponiveis das cores que podemos usar na linguagem r
colors()
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Grafico gerado a partir de Iris')
View(iris)
df = data.frame(Altura = c(1.78, 1.82, 1.98, 1.89, 1.69),
Peso = c(80, 92, 115, 95, 78),
Time = c('Flamengo', 'Fluminense', 'Vasco', 'Botafogo', 'Avai'))
View(df)
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
df
iris
class(iris$Species)
times = c('Flamengo', 'Fluminense', 'Vasco', 'Botafogo', 'Avai')
df = data.frame(Altura = c(1.78, 1.82, 1.98, 1.89, 1.69),
Peso = c(80, 92, 115, 95, 78),
Times = factor(times, levels = c('Flamengo', 'Fluminense', 'Vasco', 'Botafogo', 'Avai')))
View(df)
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
legend('topright',
legend = levels(df$Time),
col = 1:length(levels(df$Time)),
pch = 20)
View(df)
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
legend('topleft',
legend = levels(df$Time),
col = 1:length(levels(df$Time)),
pch = 20)
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
legend('topleft',
legend = levels(df$Time),
col = 1:length(levels(df$Time)),
pch = 50)
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
legend('topleft',
legend = levels(df$Time),
col = 1:length(levels(df$Time)),
pch = 'o')
cores <- c('red', 'green', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = df$Time,
main = 'Grafico gerado com altura e peso dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'o')
cores <- c('red', 'green', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = cores,
main = 'Grafico gerado com altura e peso dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'o')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'o')
# Visualizando cores disponiveis das cores que podemos usar na linguagem r
colors()
cores <- c('red', 'green3', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'o')
cores <- c('red', 'green4', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'o')
cores <- c('red', 'green4', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
pch = 'O',
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'O')
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos")
getwd()
# exemplo1
png('Grafico1.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Grafico gerado a partir de Iris')
dev.off() # fecha o dispositivo de graficos
png('GraficoIris1.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Grafico gerado a partir de Iris')
dev.off() # fecha o dispositivo de graficos
# exemplo1
png('GraficoIris2.png', width = 1000, height = 1000, res = 100)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Grafico gerado a partir de Iris')
dev.off() # fecha o dispositivo de graficos
# exemplo2
png('GraficoAltura.png', width = 1000, height = 1000, res = 100)
times = c('Flamengo', 'Fluminense', 'Vasco', 'Botafogo', 'Avai')
df = data.frame(Altura = c(1.78, 1.82, 1.98, 1.89, 1.69),
Peso = c(80, 92, 115, 95, 78),
Times = factor(times, levels = c('Flamengo', 'Fluminense', 'Vasco', 'Botafogo', 'Avai')))
View(df)
cores <- c('red', 'green4', 'black', 'gray', 'blue')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
pch = 'O',
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'O')
dev.off()
pdf('GraficoIrisPdf.pdf')
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = 'Grafico gerado a partir de Iris')
dev.off() # fecha o dispositivo de graficos
pdf('GraficoTimesPdf.pdf')
plot(df$Altura, df$Peso,
col = cores, # col = df$Time escolhe as cores automaticamente
pch = 'O',
main = 'Grafico gerado com altura e peso da média dos times')
legend('topleft',
legend = levels(df$Time),
col = cores,  # col = 1:length(levels(df$Time)) - escolhe cores automaticamente
pch = 'O')
dev.off()
dev.off()
gc()
