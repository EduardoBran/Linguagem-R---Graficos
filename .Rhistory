x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos")
getwd()
git init
# Criando as fatias
fatias = c(40, 20, 40)
# Nomeando os labels
paises <- paste(paises, fatias)
# Nomeando os labels
paises <- c('Brasil', 'Argentina', 'Chile')
# Unindo paises e fatias
paises <- paste(paises, fatias)
paises
# Incluindo mais detalhes no label
paises <- paste(paises, '%', sep = '')
paises
# Unindo paises e fatias
paises <- paste(paises, fatias)
paises
# Incluindo mais detalhes no label
paises <- paste(paises, '%', sep = '')
paises
# Criando as fatias
fatias = c(40, 20, 40)
# Nomeando os labels
paises <- c('Brasil', 'Argentina', 'Chile')
paises
# Unindo paises e fatias
paises <- paste(paises, fatias)
paises
# Incluindo mais detalhes no label
paises <- paste(paises, '%', sep = '')
paises
# Nomeando os labels
paises <- c('Brasil', 'Argentina', 'Chile')
# Unindo paises e fatias
paises <- paste(paises, fatias, sep = '--')
paises
# Unindo paises e fatias
paises <- paste(paises, fatias) # sep = ' '
paises
# Nomeando os labels
paises <- c('Brasil', 'Argentina', 'Chile')
# Unindo paises e fatias
paises <- paste(paises, fatias) # sep = ' '
paises
# Incluindo mais detalhes no label
paises <- paste(paises, '%', sep = '')
paises
cores <- c('darksalmon', 'gainsboro', 'lemonchiffon4')
pie(fatias, labels = paises,
col = cores, main = 'Distribuicao de Vendas')
# Construindo o grafico
pie(fatias, labels = paises, col = cores, main = 'Distribuicao de Vendas')
# Trabalhando com dataframes
iris
# Trabalhando com dataframes
View(iris)
Values <- table(iris$Species)
Values
View(Values)
Values <- iris$Species
View(Values)
Values <- table(iris$Species)
View(Values)
Values <- table(iris$Sepal.Length)
View(Values)
# A função table() é usada na linguagem R para contar a frequência com que valores ocorrem em um vetor, ou combinações de
# valores em vários vetores. Exemplo: no df iris ele vai mostra quais Especies tem em Species e a quantidade que aparecem
Values <- table(iris$Species)
View(Values)
vetor1 <- c(1, 1, 2, 3, 3, 3)
tabela1 <- table(vetor1)
tabela1
View(tabela1)
names()
?names
vetor1 <- c(1, 1, 2, 3, 3, 3)
tabela1 <- table(vetor1)
tabela1
# Exemplo 2: Contando a frequência de combinações de valores em dois vetores
vetor2 <- c("A", "A", "B", "C", "C")
tabela2 <- table(vetor1, vetor2)
View(tabela2)
# Exemplo 2: Contando a frequência de combinações de valores em dois vetores
vetor2 <- c("A", "A", "B", "C", "C", 'C')
tabela2 <- table(vetor1, vetor2)
View(tabela2)
# Construindo o grafico (labels representam cada fatia)
pie(fatias, labels = paises, col = cores, main = 'Distribuicao de Vendas')
nomes <- c("Categoria 1", "Categoria 2", "Categoria 3")
# Definindo as cores
cores <- c('steelblue1', 'tan3', 'seagreen3')
# Criar grafico de pizza usando as cores do vetor criado
pie(dados, labels = nomes, col = cores)
# Dados para o gráfico de pizza
dados <- c(20, 30, 50)
# Nomes das categorias
nomes <- c("Categoria 1", "Categoria 2", "Categoria 3")
# Definindo as cores
cores <- c('steelblue1', 'tan3', 'seagreen3')
# Criar grafico de pizza usando as cores do vetor criado
pie(dados, labels = nomes, col = cores)
# Criar gráfico de pizza usando a funcao rainbow()
pie(dados, labels = nomes, col = rainbow(length(dados)))
# Criar gráfico de pizza usando a funcao rainbow()
pie(dados, labels = nomes, col = rainbow(length(dados)))
labels <- paste(names(Values))
labels
View(labels)
names(cars)
View(table(cars))
View(table(iris))
View(table(cars$speed))
pie(Values, labels = labels, main = 'Distribuicao de Especies')
pie(Values, labels = labels, main = 'Distribuicao de Especies', col = cores)
pie(Values, labels = labels, main = 'Distribuicao de Especies', col = rainbow(length(lables)))
pie(Values, labels = labels, main = 'Distribuicao de Especies', col = rainbow(length(labels)))
pie(Values, labels = labels, main = 'Distribuicao de Especies')
# Exemplo 1
View(cars)
# Exemplo 1
View(mtcars)
# Exemplo 1
View(ChickWeight)
Values2 <- table(ChickWeight$Diet)
View(Values2)
names(Values2) <- c('Dieta 1', 'Dieta 2', 'Dieta 3', 'Dieta 4')
View(Values2)
Values2 <- table(ChickWeight$Diet)
View(Values2)
names(Values2) <- c('Dieta 1', 'Dieta 2', 'Dieta 3', 'Dieta 4')
View(Values2)
labels2 <- paste(names(Values2))
View(labels2)
cores <- c('darksalmon', 'gainsboro', 'lemonchiffon4')
pie(Values2, labels = labels2, col = cores, main = 'Distribuicao das Dietas usadas')
pie(Values2, labels = labels2, main = 'Distribuicao das Dietas usadas')
pie(Values2, labels = labels2, col = rainbow(length(labels2)), main = 'Distribuicao das Dietas usadas')
# Construindo o grafico (labels representam cada fatia)
pie(fatias, labels = paises, col = cores, main = 'Distribuicao de Vendas')
pie(Values, labels = labels, main = 'Distribuicao de Especies')
# 3D
install.packages('plotrix')
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col = cores, main = 'Distribuicao de Vendas')
pie3D(Values, labels = labels, main = 'Distribuicao de Especies')
pie(Values, labels = labels, main = 'Distribuicao de Especies')
pie3D(Values, labels = labels, main = 'Distribuicao de Especies')
pie3D(Values2, labels = labels2, col = rainbow(length(labels2)), main = 'Distribuicao das Dietas usadas')
pie3D(fatias, labels = paises, explode = 0.05,
col = cores, main = 'Distribuicao de Vendas')
pie3D(Values, labels = labels, main = 'Distribuicao de Especies')
pie3D(Values, labels = labels, explode = 0.10,
col = cores, main = 'Distribuicao de Especies')
pie3D(Values2, labels = labels2, explode = 0.20,
col = rainbow(length(labels2)), main = 'Distribuicao das Dietas usadas')
pie3D(Values2, labels = labels2, explode = 0.15,
col = rainbow(length(labels2)), main = 'Distribuicao das Dietas usadas')
pie3D(Values2, labels = labels2, explode = 0.45,
col = rainbow(length(labels2)), main = 'Distribuicao das Dietas usadas')
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos")
getwd()
# Instalando e carregando o pacote
install.packages('ggplot2')
library(ggplot2)
# Plotando um grafico basico com qplot()
data(tips, package = 'reshape2')
# Plotando um grafico basico com qplot()
oque <- data(tips, package = 'reshape2')
oque
View(oque)
View(tips)
View(tips)
class(iris)
packageDescription(class(iris))
packageDescription(class(iris)[1])$Package
tips
# Plotando um grafico basico com qplot()
qplot(tips$total_bill, tips$tip, data = tips, geom = 'point')
data(tips, package = 'reshape12312')
data(tips, package = 'reshape2')
# Plotando um grafico basico com qplot()
qplot(tips$total_bill, tips$tip, data = tips, geom = 'point')
# Com o data() carregado
qplot(total_bill, tip, data = tips, geom = 'point')
# Com o data() carregado
qplot(total_bill, tip, data = tips, geom = 'X')
qplot(iris$Sepal.Length, iris$Sepal.Width, data = tips, geom = 'point')
qplot(iris$Sepal.Length, iris$Sepal.Width, data = iris, geom = 'point')
qplot(Sepal.Length, Sepal.Width, data = iris, geom = 'point')
qplot(iris$Sepal.Length, iris$Sepal.Width, data = iris, geom = 'point')
qplot(Sepal.Length, Sepal.Width, data = iris, geom = 'point')
name(mtcars)
names(mtcars)
qplot(mpg, cyl, data = mtcars, geom = 'point')
data(tips, package = 'reshape2')
qplot(total_bill, tip, data = tips, geom = 'point')
qplot(total_bill, tip, data = tips, geom = 'point')
qplot(total_bill, tip, data = tips, geom = 'point')
qplot(tips$total_bill, tips$tip, data = tips, geom = 'point')
data(tips, package = 'reshape2')
qplot(total_bill, tip, data = tips, geom = 'point')
data(tips, package = 'reshape2')
names(mtcars)
qplot(mpg, cyl, data = mtcars, geom = 'point')
qplot(total_bill, tip, data = tips, geom = 'point')
View(tips)
df_valor_casas <- data.frame(matrix(ncol = 2, nrow = 4))
View(df_valor_casas)
colnames(df_valor_casas) <- c('Preco', 'N de Quartos')
rownames(df_valor_casas) <- c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4')
# atribuindo valores
df_valor_casas$Preco <- c(780, 572, 859, 950)
df_valor_casas$`N de Quartos` <- c(3, 2, 4, 5)
plot(df_valor_casas$Preco, df_valor_casas$`N de Quartos`, col = 'blue',
pch = 10, cex = 1.5,
main = 'Valor De Imovel x N de Quartos', col.main = 'black', cex.main = 1.5,
xlab = 'Preco', ylab = 'N de quartos')
df_valor_casas2 <- data.frame(Preco = c(572, 780, 859, 950),
`N de Quartos` = c('2', '3', '4', '5'),
row.names = c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4'))
qplot(total_bill, tip, data = tips, geom = 'point') # 'total_bill - valor da conta | 'tip' - valor da gorgeta
df_valor_casas <- data.frame(Preco = c(572, 780, 859, 950),
`N de Quartos` = c('2', '3', '4', '5'),
row.names = c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4'))
data(tips, package = 'reshape2')
df_valor_casas <- data.frame(Preco = c(572, 780, 859, 950),
`N de Quartos` = c('2', '3', '4', '5'),
row.names = c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4'))
# criando o qplot
qplot(df_valor_casas$Preco, df_valor_casas$N.de.Quartos, data = df_valor_casas, geom = 'point')
qplot(df_valor_casas$Preco, df_valor_casas$N.de.Quartos, data = df_valor_casas,
geom = 'point', xlab = 'Preco', ylab = 'N de quartos')
qplot(total_bill, tip, data = tips, geom = 'point', xlab = 'Valor da Conta', ylab = 'Vaor da Gorgeta') # 'total_bill - valor da conta | 'tip' - valor da gorgeta
ggplot(data = dados, aes(x = x, y = y)) +
geom_point()
dados = data.frame(x = c(1,2,3), y = c(4,5,6))
ggplot(data = dados, aes(x = x, y = y)) +
geom_point()
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
?aes
??aes
?aes
ggplot()
ggplot() + camada1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 5
)
ggplot() + camada1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = smoker),
data = tips,
size = 3
)
ggplot() + camada1
ggplot(data = tips, aes(x = total_bill, y = tip, color = sex)) +
geom_point(size = 3)
ggplot(data = df_valor_casas, aex(x = df_valor_casas$Preco, y = df_valor_casas)) +
geom_point(size = 3)
ggplot(data = df_valor_casas, aes(x = df_valor_casas$Preco, y = df_valor_casas)) +
geom_point(size = 3)
ggplot(data = df_valor_casas, aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos)) +
geom_point(size = 3)
df_valor_casas <- data.frame(Preco = c(572, 780, 859, 950),
`N de Quartos` = c('2', '3', '4', '5'),
Bairro = c('Classe Alta', 'Classe Media', 'Classe Alta', 'Classe Alta')
row.names = c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4'))
# criando df com valores direto na funcao
df_valor_casas <- data.frame(Preco = c(572, 780, 859, 950),
`N de Quartos` = c('2', '3', '4', '5'),
Bairro = c('Classe Alta', 'Classe Media', 'Classe Alta', 'Classe Alta'),
row.names = c('Casa 1', 'Casa 2', 'Casa 3', 'Casa 4'))
qplot(df_valor_casas$Preco, df_valor_casas$N.de.Quartos, data = df_valor_casas,
geom = 'point', xlab = 'Preco', ylab = 'N de quartos')
ggplot(data = df_valor_casas, aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos, color = df_valor_casas$Bairro)) +
geom_point(size = 3)
camada1_df <- geom_point(
mapping = aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos, color = df_valor_casas$Bairro),
data = df_valor_casas,
size = 3
)
ggplot() + camada1
camada1_df <- geom_point(
mapping = aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos, color = df_valor_casas$Bairro),
data = df_valor_casas,
size = 3
)
ggplot() + camada1_df
camada1_df <- geom_point(
mapping = aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos, color = df_valor_casas$Bairro),
data = df_valor_casas,
size = 3
)
ggplot() + camada1_df
ggplot(data = df_valor_casas, aes(x = df_valor_casas$Preco, y = df_valor_casas$N.de.Quartos, color = df_valor_casas$Bairro)) +
geom_point(size = 3)
